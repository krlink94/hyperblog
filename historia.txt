    def callback(data,pub):
        my_data=data.position;

        pos=data.position;
        control(my_data,pub);
    



    def control(my_data,pub):
        L1=0.209;
        L2=0.249976;
        L3=0.25384;
        #print("Las posiciones articulares"+ str(tuple(my_data)))
        q1, q2, q3=my_data;
        #q2=-q2
        
        print("q1: " + str(q1) + "q2: " + str(q2) + "q3: " + str(q3))
        x=math.cos(q1)*((L3*math.cos(q2+q3))+(L2*math.cos(q2)))
        y=math.sin(q1)*(L3*math.cos(q2 + q3) + L2*math.cos(q2))
        z=L1 + L3*math.sin(q2 + q3) + L2*math.sin(q2)
        
        print("x: "+ str(float(x)) + " y: "+ str(float(y)) + " z: " + str(float(z)))


        xd=0.49;
        yd=0;
        zd=0.18;
        
        #k=10
        ux=8*(xd-x)
        uy=8*(yd-y)
        uz=8*(zd-z)
        u=np.array([[ux],[uy],[uz]])
        print("u")  

        Jv=np.array([ [-math.sin(q1)*(L3*math.cos(q2 + q3) + L2*math.cos(q2)), -math.cos(q1)*(L3*math.sin(q2 + q3) + L2*math.sin(q2)), -L3*math.sin(q2 + q3)*math.cos(q1)], [math.cos(q1)*(L3*math.cos(q2 + q3) + L2*math.cos(q2)), -math.sin(q1)*(L3*math.sin(q2 + q3) + L2*math.sin(q2)), -L3*math.sin(q2 + q3)*math.sin(q1)],[ 0, L3*math.cos(q2 + q3) + L2*math.cos(q2), L3*math.cos(q2 + q3)]])

        Jw=np.array([[0,math.sin(q1),math.sin(q1)],[0,-math.cos(q1),-math.cos(q1)],[1,0,0]])

        JI=np.linalg.inv(Jv)

        qp=np.dot(JI,u)
        #print(qp)
        qp1=qp[0][0] 
        qp2=qp[1][0] 
        qp3=qp[2][0]    


        #print(JI)





            #hello_str = "hello world %s" % rospy.get_time()
            #position1 = qp1*(math.pi)/180

            #print(qp2)
        position1 = qp1;
            #rospy.loginfo(position1);
        pub[0].publish(position1);
        #rospy.sleep(0.01)
            #position2 = qp2*(math.pi)/180
        position2 = qp2;
            #rospy.loginfo(position2);
        pub[1].publish(position2);

        position3 = qp3;
            #rospy.loginfo(position3);
        pub[2].publish(position3);
            #rate.sleep()
            #position3 = qp3*(math.pi)/180
        print("qp1: " + str(qp1) + "qp2: " + str(qp2) + "qp3: " + str(qp3)  )


        
        #if t_total > 0.0002:
            #qpf=imjs.JImagen()
            #print("qpc " + str(qpf))
            #qp1,qp2,qp3=
            #position1 = qp1;
            #rospy.loginfo(position1);
            #pub[0].publish(position1);
        #rospy.sleep(0.01)
            #position2 = qp2*(math.pi)/180
            
            #position2 = qp2;
            #rospy.loginfo(position2);
            #pub[1].publish(position2);

            #position3 = qp3;
            #rospy.loginfo(position3);
            #pub[2].publish(position3);
            
            
        


        


        #print(q1)
        #rospy.init_node('listener_new', anonymous=True)    
        #rospy.Subscriber('/Drakari2/joint_states',JointState,callback)
        #rospy.spin()






    def talker():
        global pub
        rospy.init_node('talker', anonymous=True)


        pub=[rospy.Publisher('/Drakari2/j1_velocity_controller/command', Float64, queue_size=10), rospy.Publisher('/Drakari2/j2_velocity_controller/command', Float64, queue_size=10), rospy.Publisher('/Drakari2/j3_velocity_controller/command', Float64, queue_size=10)]  
        #pub1 = rospy.Publisher('/Drakari2/j1_velocity_controller/command', Float64, queue_size=10)
        #pub2 = rospy.Publisher('/Drakari2/j2_velocity_controller/command', Float64, queue_size=10)
        #pub3 = rospy.Publisher('/Drakari2/j3_velocity_controller/command', Float64, queue_size=10)

        
        #p=callback(JointState)
        rate = rospy.Rate(10) # 10hz
        #rospy.loginfo(JointState.position)
        Op=input('Pulse 1 para ingresar posiciones articulares o 2 para ingresar posiciones cartesianas ')
        
        
    
        if Op==2:
            px = input('Ingresa posición x en milímetros ')
            px=float(px)
            py = input('Ingresa posición y en milímetros ')
            py=float(py)
            pz = input('Ingresa posición z en milímetros ')
            pz=float(pz)
            
            L1=0.21;
        L2=0.250;
            L3=0.25886;
            #px=0;
            #py=0;
            #pz=640;

            q1=((math.atan2(py,px))*180)/math.pi;
            
            rp=math.sqrt((px**2) + (py**2));

            r1=math.sqrt((pz-L1)**2 + (rp**2));
            r1=math.sqrt(L2**2 +L3**2+ rp**2 + ((pz-L1)**2));

            m=(r1**2-L2**2-L3**2)/(2*L2*L3);
            if m < 1 or m >1:
            m=1
            q3=math.acos(m);
            q3=float(q3*180)/math.pi;
                

            a=(pz-L1);
            #a1=(a/rp);
            #if a1 < 1 or a1 >1:
            #a1=1
        b1=math.atan2(a,rp);


            m1=(L3**2-(L2**2)-(r1**2))/(-2*L2*r1);
            if m1 < 1 or m1 >1:
            m1=1
            b=math.sqrt(1-(m1**2));
            q2=((b1-math.acos(m1))*180)/math.pi;     
                
            
            
            
        elif Op==1:
            #q1 = input('Ingresa posición articular q1 en grados ')
            #q2 = input('Ingresa posición articular q2 en grados ')
            #q3 = input('Ingresa posición articular q3 en grados ')
        
            pos=rospy.Subscriber('/Drakari2/joint_states',JointState,callback,pub)
            rospy.spin()        
                    
        print('flag')   